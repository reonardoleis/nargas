// Code generated by gocc; DO NOT EDIT.

package parser

import "github.com/reonardoleis/nargas/internal/ast"

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib, interface{}) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Program	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Program : DeclarationList	<< ast.NewProgram(X[0]) >>`,
		Id:         "Program",
		NTType:     1,
		Index:      1,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewProgram(X[0])
		},
	},
	ProdTabEntry{
		String: `DeclarationList : Declaration ";" DeclarationList	<< ast.NewDeclarationList(X[0], X[2]) >>`,
		Id:         "DeclarationList",
		NTType:     2,
		Index:      2,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewDeclarationList(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `DeclarationList : empty	<< nil, nil >>`,
		Id:         "DeclarationList",
		NTType:     2,
		Index:      3,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Declaration : "let" id "=" Expr	<< ast.NewDeclaration(X[1], X[3]) >>`,
		Id:         "Declaration",
		NTType:     3,
		Index:      4,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewDeclaration(X[1], X[3])
		},
	},
	ProdTabEntry{
		String: `Declaration : "let" id "=" Function	<< ast.NewDeclaration(X[1], X[3]) >>`,
		Id:         "Declaration",
		NTType:     3,
		Index:      5,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewDeclaration(X[1], X[3])
		},
	},
	ProdTabEntry{
		String: `Literal : literal_integer	<< ast.NewLiteral(X[0]) >>`,
		Id:         "Literal",
		NTType:     4,
		Index:      6,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewLiteral(X[0])
		},
	},
	ProdTabEntry{
		String: `Expr : Literal	<< ast.NewExpr(X[0], nil, nil) >>`,
		Id:         "Expr",
		NTType:     5,
		Index:      7,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewExpr(X[0], nil, nil)
		},
	},
	ProdTabEntry{
		String: `Expr : Literal "+" Literal	<< ast.NewExpr(X[0], X[1], X[2]) >>`,
		Id:         "Expr",
		NTType:     5,
		Index:      8,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewExpr(X[0], X[1], X[2])
		},
	},
	ProdTabEntry{
		String: `Function : "fn" "(" FunctionParamList ")" "=>" Body	<< ast.NewFunction(X[2], X[5]) >>`,
		Id:         "Function",
		NTType:     6,
		Index:      9,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewFunction(X[2], X[5])
		},
	},
	ProdTabEntry{
		String: `FunctionParamList : id	<< ast.NewFunctionParamList(X[0], nil) >>`,
		Id:         "FunctionParamList",
		NTType:     7,
		Index:      10,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewFunctionParamList(X[0], nil)
		},
	},
	ProdTabEntry{
		String: `FunctionParamList : id "," FunctionParamList	<< ast.NewFunctionParamList(X[0], X[2]) >>`,
		Id:         "FunctionParamList",
		NTType:     7,
		Index:      11,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewFunctionParamList(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `Body : "{" CommandList "}"	<< ast.NewBody(X[1]) >>`,
		Id:         "Body",
		NTType:     8,
		Index:      12,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewBody(X[1])
		},
	},
	ProdTabEntry{
		String: `CommandList : Command CommandList	<< ast.NewCommandList(X[0], X[1]) >>`,
		Id:         "CommandList",
		NTType:     9,
		Index:      13,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewCommandList(X[0], X[1])
		},
	},
	ProdTabEntry{
		String: `CommandList : Command ";" CommandList	<< ast.NewCommandList(X[0], X[2]) >>`,
		Id:         "CommandList",
		NTType:     9,
		Index:      14,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewCommandList(X[0], X[2])
		},
	},
	ProdTabEntry{
		String: `CommandList : empty	<< nil, nil >>`,
		Id:         "CommandList",
		NTType:     9,
		Index:      15,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Command : id "=" Expr	<< ast.NewCommand(ast.NewCommandVarAssign(X[0], X[2])) >>`,
		Id:         "Command",
		NTType:     10,
		Index:      16,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewCommand(ast.NewCommandVarAssign(X[0], X[2]))
		},
	},
	ProdTabEntry{
		String: `Command : CommandReturn	<< ast.NewCommand(X[0]) >>`,
		Id:         "Command",
		NTType:     10,
		Index:      17,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewCommand(X[0])
		},
	},
	ProdTabEntry{
		String: `CommandReturn : id	<< ast.NewCommandReturn(X[0]) >>`,
		Id:         "CommandReturn",
		NTType:     11,
		Index:      18,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return ast.NewCommandReturn(X[0])
		},
	},
}
