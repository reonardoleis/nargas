// Code generated by gocc; DO NOT EDIT.

package parser

type (
	actionTable [numStates]actionRow
	actionRow   struct {
		canRecover bool
		actions    [numSymbols]action
	}
)

var actionTab = actionTable{
	actionRow{ // S0
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(3), // ␚, reduce: DeclarationList
			nil,       // ;
			nil,       // empty
			shift(4),  // let
			nil,       // id
			nil,       // =
			nil,       // literal_integer
			nil,       // +
			nil,       // fn
			nil,       // (
			nil,       // )
			nil,       // =>
			nil,       // ,
			nil,       // {
			nil,       // }
		},
	},
	actionRow{ // S1
		canRecover: false,
		actions: [numSymbols]action{
			nil,          // INVALID
			accept(true), // ␚
			nil,          // ;
			nil,          // empty
			nil,          // let
			nil,          // id
			nil,          // =
			nil,          // literal_integer
			nil,          // +
			nil,          // fn
			nil,          // (
			nil,          // )
			nil,          // =>
			nil,          // ,
			nil,          // {
			nil,          // }
		},
	},
	actionRow{ // S2
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(1), // ␚, reduce: Program
			nil,       // ;
			nil,       // empty
			nil,       // let
			nil,       // id
			nil,       // =
			nil,       // literal_integer
			nil,       // +
			nil,       // fn
			nil,       // (
			nil,       // )
			nil,       // =>
			nil,       // ,
			nil,       // {
			nil,       // }
		},
	},
	actionRow{ // S3
		canRecover: false,
		actions: [numSymbols]action{
			nil,      // INVALID
			nil,      // ␚
			shift(5), // ;
			nil,      // empty
			nil,      // let
			nil,      // id
			nil,      // =
			nil,      // literal_integer
			nil,      // +
			nil,      // fn
			nil,      // (
			nil,      // )
			nil,      // =>
			nil,      // ,
			nil,      // {
			nil,      // }
		},
	},
	actionRow{ // S4
		canRecover: false,
		actions: [numSymbols]action{
			nil,      // INVALID
			nil,      // ␚
			nil,      // ;
			nil,      // empty
			nil,      // let
			shift(6), // id
			nil,      // =
			nil,      // literal_integer
			nil,      // +
			nil,      // fn
			nil,      // (
			nil,      // )
			nil,      // =>
			nil,      // ,
			nil,      // {
			nil,      // }
		},
	},
	actionRow{ // S5
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(3), // ␚, reduce: DeclarationList
			nil,       // ;
			nil,       // empty
			shift(4),  // let
			nil,       // id
			nil,       // =
			nil,       // literal_integer
			nil,       // +
			nil,       // fn
			nil,       // (
			nil,       // )
			nil,       // =>
			nil,       // ,
			nil,       // {
			nil,       // }
		},
	},
	actionRow{ // S6
		canRecover: false,
		actions: [numSymbols]action{
			nil,      // INVALID
			nil,      // ␚
			nil,      // ;
			nil,      // empty
			nil,      // let
			nil,      // id
			shift(8), // =
			nil,      // literal_integer
			nil,      // +
			nil,      // fn
			nil,      // (
			nil,      // )
			nil,      // =>
			nil,      // ,
			nil,      // {
			nil,      // }
		},
	},
	actionRow{ // S7
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			reduce(2), // ␚, reduce: DeclarationList
			nil,       // ;
			nil,       // empty
			nil,       // let
			nil,       // id
			nil,       // =
			nil,       // literal_integer
			nil,       // +
			nil,       // fn
			nil,       // (
			nil,       // )
			nil,       // =>
			nil,       // ,
			nil,       // {
			nil,       // }
		},
	},
	actionRow{ // S8
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // ;
			nil,       // empty
			nil,       // let
			nil,       // id
			nil,       // =
			shift(12), // literal_integer
			nil,       // +
			shift(13), // fn
			nil,       // (
			nil,       // )
			nil,       // =>
			nil,       // ,
			nil,       // {
			nil,       // }
		},
	},
	actionRow{ // S9
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			reduce(4), // ;, reduce: Declaration
			nil,       // empty
			nil,       // let
			nil,       // id
			nil,       // =
			nil,       // literal_integer
			nil,       // +
			nil,       // fn
			nil,       // (
			nil,       // )
			nil,       // =>
			nil,       // ,
			nil,       // {
			nil,       // }
		},
	},
	actionRow{ // S10
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			reduce(5), // ;, reduce: Declaration
			nil,       // empty
			nil,       // let
			nil,       // id
			nil,       // =
			nil,       // literal_integer
			nil,       // +
			nil,       // fn
			nil,       // (
			nil,       // )
			nil,       // =>
			nil,       // ,
			nil,       // {
			nil,       // }
		},
	},
	actionRow{ // S11
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			reduce(7), // ;, reduce: Expr
			nil,       // empty
			nil,       // let
			nil,       // id
			nil,       // =
			nil,       // literal_integer
			shift(14), // +
			nil,       // fn
			nil,       // (
			nil,       // )
			nil,       // =>
			nil,       // ,
			nil,       // {
			nil,       // }
		},
	},
	actionRow{ // S12
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			reduce(6), // ;, reduce: Literal
			nil,       // empty
			nil,       // let
			nil,       // id
			nil,       // =
			nil,       // literal_integer
			reduce(6), // +, reduce: Literal
			nil,       // fn
			nil,       // (
			nil,       // )
			nil,       // =>
			nil,       // ,
			nil,       // {
			nil,       // }
		},
	},
	actionRow{ // S13
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // ;
			nil,       // empty
			nil,       // let
			nil,       // id
			nil,       // =
			nil,       // literal_integer
			nil,       // +
			nil,       // fn
			shift(15), // (
			nil,       // )
			nil,       // =>
			nil,       // ,
			nil,       // {
			nil,       // }
		},
	},
	actionRow{ // S14
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // ;
			nil,       // empty
			nil,       // let
			nil,       // id
			nil,       // =
			shift(17), // literal_integer
			nil,       // +
			nil,       // fn
			nil,       // (
			nil,       // )
			nil,       // =>
			nil,       // ,
			nil,       // {
			nil,       // }
		},
	},
	actionRow{ // S15
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // ;
			nil,       // empty
			nil,       // let
			shift(18), // id
			nil,       // =
			nil,       // literal_integer
			nil,       // +
			nil,       // fn
			nil,       // (
			nil,       // )
			nil,       // =>
			nil,       // ,
			nil,       // {
			nil,       // }
		},
	},
	actionRow{ // S16
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			reduce(8), // ;, reduce: Expr
			nil,       // empty
			nil,       // let
			nil,       // id
			nil,       // =
			nil,       // literal_integer
			nil,       // +
			nil,       // fn
			nil,       // (
			nil,       // )
			nil,       // =>
			nil,       // ,
			nil,       // {
			nil,       // }
		},
	},
	actionRow{ // S17
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			reduce(6), // ;, reduce: Literal
			nil,       // empty
			nil,       // let
			nil,       // id
			nil,       // =
			nil,       // literal_integer
			nil,       // +
			nil,       // fn
			nil,       // (
			nil,       // )
			nil,       // =>
			nil,       // ,
			nil,       // {
			nil,       // }
		},
	},
	actionRow{ // S18
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // ;
			nil,        // empty
			nil,        // let
			nil,        // id
			nil,        // =
			nil,        // literal_integer
			nil,        // +
			nil,        // fn
			nil,        // (
			reduce(10), // ), reduce: FunctionParamList
			nil,        // =>
			shift(20),  // ,
			nil,        // {
			nil,        // }
		},
	},
	actionRow{ // S19
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // ;
			nil,       // empty
			nil,       // let
			nil,       // id
			nil,       // =
			nil,       // literal_integer
			nil,       // +
			nil,       // fn
			nil,       // (
			shift(21), // )
			nil,       // =>
			nil,       // ,
			nil,       // {
			nil,       // }
		},
	},
	actionRow{ // S20
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // ;
			nil,       // empty
			nil,       // let
			shift(18), // id
			nil,       // =
			nil,       // literal_integer
			nil,       // +
			nil,       // fn
			nil,       // (
			nil,       // )
			nil,       // =>
			nil,       // ,
			nil,       // {
			nil,       // }
		},
	},
	actionRow{ // S21
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // ;
			nil,       // empty
			nil,       // let
			nil,       // id
			nil,       // =
			nil,       // literal_integer
			nil,       // +
			nil,       // fn
			nil,       // (
			nil,       // )
			shift(23), // =>
			nil,       // ,
			nil,       // {
			nil,       // }
		},
	},
	actionRow{ // S22
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // ;
			nil,        // empty
			nil,        // let
			nil,        // id
			nil,        // =
			nil,        // literal_integer
			nil,        // +
			nil,        // fn
			nil,        // (
			reduce(11), // ), reduce: FunctionParamList
			nil,        // =>
			nil,        // ,
			nil,        // {
			nil,        // }
		},
	},
	actionRow{ // S23
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // ;
			nil,       // empty
			nil,       // let
			nil,       // id
			nil,       // =
			nil,       // literal_integer
			nil,       // +
			nil,       // fn
			nil,       // (
			nil,       // )
			nil,       // =>
			nil,       // ,
			shift(25), // {
			nil,       // }
		},
	},
	actionRow{ // S24
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			reduce(9), // ;, reduce: Function
			nil,       // empty
			nil,       // let
			nil,       // id
			nil,       // =
			nil,       // literal_integer
			nil,       // +
			nil,       // fn
			nil,       // (
			nil,       // )
			nil,       // =>
			nil,       // ,
			nil,       // {
			nil,       // }
		},
	},
	actionRow{ // S25
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // ;
			nil,        // empty
			nil,        // let
			shift(26),  // id
			nil,        // =
			nil,        // literal_integer
			nil,        // +
			nil,        // fn
			nil,        // (
			nil,        // )
			nil,        // =>
			nil,        // ,
			nil,        // {
			reduce(15), // }, reduce: CommandList
		},
	},
	actionRow{ // S26
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			reduce(18), // ;, reduce: CommandReturn
			nil,        // empty
			nil,        // let
			reduce(18), // id, reduce: CommandReturn
			shift(30),  // =
			nil,        // literal_integer
			nil,        // +
			nil,        // fn
			nil,        // (
			nil,        // )
			nil,        // =>
			nil,        // ,
			nil,        // {
			reduce(18), // }, reduce: CommandReturn
		},
	},
	actionRow{ // S27
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // ;
			nil,       // empty
			nil,       // let
			nil,       // id
			nil,       // =
			nil,       // literal_integer
			nil,       // +
			nil,       // fn
			nil,       // (
			nil,       // )
			nil,       // =>
			nil,       // ,
			nil,       // {
			shift(31), // }
		},
	},
	actionRow{ // S28
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			shift(32),  // ;
			nil,        // empty
			nil,        // let
			shift(26),  // id
			nil,        // =
			nil,        // literal_integer
			nil,        // +
			nil,        // fn
			nil,        // (
			nil,        // )
			nil,        // =>
			nil,        // ,
			nil,        // {
			reduce(15), // }, reduce: CommandList
		},
	},
	actionRow{ // S29
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			reduce(17), // ;, reduce: Command
			nil,        // empty
			nil,        // let
			reduce(17), // id, reduce: Command
			nil,        // =
			nil,        // literal_integer
			nil,        // +
			nil,        // fn
			nil,        // (
			nil,        // )
			nil,        // =>
			nil,        // ,
			nil,        // {
			reduce(17), // }, reduce: Command
		},
	},
	actionRow{ // S30
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // ;
			nil,       // empty
			nil,       // let
			nil,       // id
			nil,       // =
			shift(36), // literal_integer
			nil,       // +
			nil,       // fn
			nil,       // (
			nil,       // )
			nil,       // =>
			nil,       // ,
			nil,       // {
			nil,       // }
		},
	},
	actionRow{ // S31
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			reduce(12), // ;, reduce: Body
			nil,        // empty
			nil,        // let
			nil,        // id
			nil,        // =
			nil,        // literal_integer
			nil,        // +
			nil,        // fn
			nil,        // (
			nil,        // )
			nil,        // =>
			nil,        // ,
			nil,        // {
			nil,        // }
		},
	},
	actionRow{ // S32
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // ;
			nil,        // empty
			nil,        // let
			shift(26),  // id
			nil,        // =
			nil,        // literal_integer
			nil,        // +
			nil,        // fn
			nil,        // (
			nil,        // )
			nil,        // =>
			nil,        // ,
			nil,        // {
			reduce(15), // }, reduce: CommandList
		},
	},
	actionRow{ // S33
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // ;
			nil,        // empty
			nil,        // let
			nil,        // id
			nil,        // =
			nil,        // literal_integer
			nil,        // +
			nil,        // fn
			nil,        // (
			nil,        // )
			nil,        // =>
			nil,        // ,
			nil,        // {
			reduce(13), // }, reduce: CommandList
		},
	},
	actionRow{ // S34
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			reduce(16), // ;, reduce: Command
			nil,        // empty
			nil,        // let
			reduce(16), // id, reduce: Command
			nil,        // =
			nil,        // literal_integer
			nil,        // +
			nil,        // fn
			nil,        // (
			nil,        // )
			nil,        // =>
			nil,        // ,
			nil,        // {
			reduce(16), // }, reduce: Command
		},
	},
	actionRow{ // S35
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			reduce(7), // ;, reduce: Expr
			nil,       // empty
			nil,       // let
			reduce(7), // id, reduce: Expr
			nil,       // =
			nil,       // literal_integer
			shift(38), // +
			nil,       // fn
			nil,       // (
			nil,       // )
			nil,       // =>
			nil,       // ,
			nil,       // {
			reduce(7), // }, reduce: Expr
		},
	},
	actionRow{ // S36
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			reduce(6), // ;, reduce: Literal
			nil,       // empty
			nil,       // let
			reduce(6), // id, reduce: Literal
			nil,       // =
			nil,       // literal_integer
			reduce(6), // +, reduce: Literal
			nil,       // fn
			nil,       // (
			nil,       // )
			nil,       // =>
			nil,       // ,
			nil,       // {
			reduce(6), // }, reduce: Literal
		},
	},
	actionRow{ // S37
		canRecover: false,
		actions: [numSymbols]action{
			nil,        // INVALID
			nil,        // ␚
			nil,        // ;
			nil,        // empty
			nil,        // let
			nil,        // id
			nil,        // =
			nil,        // literal_integer
			nil,        // +
			nil,        // fn
			nil,        // (
			nil,        // )
			nil,        // =>
			nil,        // ,
			nil,        // {
			reduce(14), // }, reduce: CommandList
		},
	},
	actionRow{ // S38
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			nil,       // ;
			nil,       // empty
			nil,       // let
			nil,       // id
			nil,       // =
			shift(40), // literal_integer
			nil,       // +
			nil,       // fn
			nil,       // (
			nil,       // )
			nil,       // =>
			nil,       // ,
			nil,       // {
			nil,       // }
		},
	},
	actionRow{ // S39
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			reduce(8), // ;, reduce: Expr
			nil,       // empty
			nil,       // let
			reduce(8), // id, reduce: Expr
			nil,       // =
			nil,       // literal_integer
			nil,       // +
			nil,       // fn
			nil,       // (
			nil,       // )
			nil,       // =>
			nil,       // ,
			nil,       // {
			reduce(8), // }, reduce: Expr
		},
	},
	actionRow{ // S40
		canRecover: false,
		actions: [numSymbols]action{
			nil,       // INVALID
			nil,       // ␚
			reduce(6), // ;, reduce: Literal
			nil,       // empty
			nil,       // let
			reduce(6), // id, reduce: Literal
			nil,       // =
			nil,       // literal_integer
			nil,       // +
			nil,       // fn
			nil,       // (
			nil,       // )
			nil,       // =>
			nil,       // ,
			nil,       // {
			reduce(6), // }, reduce: Literal
		},
	},
}
